name: Windows RDP Access
on: workflow_dispatch
jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Enable Remote Desktop
      run: |
        # Enable RDP and configure authentication
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

        # Audio redirection settings
        $tsPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        if (-not (Test-Path $tsPath)) { New-Item -Path $tsPath -Force }
        Set-ItemProperty -Path $tsPath -Name "fDisableAudioCapture" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $tsPath -Name "fEnableAudioRedirection" -Value 1 -Type DWord -Force

        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableAudioRedirection" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fEnableAudioCompression" -Value 1 -Force

        # Client-side audio capture redirection
        $clientPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client"
        if (-not (Test-Path $clientPath)) { New-Item -Path $clientPath -Force }
        Set-ItemProperty -Path $clientPath -Name "fDisableAudioCaptureRedirection" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $clientPath -Name "fDisableAudioRedirection" -Value 0 -Type DWord -Force

    - name: Optimize Network and Performance
      run: |
        # RDP-Tcp optimizations for bandwidth, encryption, and visuals
        $rdpTcpPath = 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        Set-ItemProperty -Path $rdpTcpPath -Name "MaxBandwidth" -Value 0xffffffff -Type DWord -Force
        Set-ItemProperty -Path $rdpTcpPath -Name "MinEncryptionLevel" -Value 2 -Type DWord -Force
        Set-ItemProperty -Path $rdpTcpPath -Name "ColorDepth" -Value 4 -Type DWord -Force  # 24-bit color
        Set-ItemProperty -Path $rdpTcpPath -Name "DisableWallpaper" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $rdpTcpPath -Name "DisableFullWindowDrag" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $rdpTcpPath -Name "DisableMenuAnims" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $rdpTcpPath -Name "DisableThemes" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $rdpTcpPath -Name "DisableCursorSetting" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $rdpTcpPath -Name "fDisableClip" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $rdpTcpPath -Name "FlowControlDisplayBandwidth" -Value 255 -Type DWord -Force
        Set-ItemProperty -Path $rdpTcpPath -Name "FlowControlChannelBandwidth" -Value 255 -Type DWord -Force
        Set-ItemProperty -Path $rdpTcpPath -Name "FlowControlChargePostCompression" -Value 0 -Type DWord -Force

        # H.264/AVC codec preferences
        $tsPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services"
        Set-ItemProperty -Path $tsPath -Name "AVCHardwareEncodePreferred" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $tsPath -Name "PrioritizeH264AVC444" -Value 1 -Type DWord -Force
        Set-ItemProperty -Path $tsPath -Name "VisualQuality" -Value 1 -Type DWord -Force  # Medium quality
        Set-ItemProperty -Path $tsPath -Name "MaxCompressionLevel" -Value 0 -Type DWord -Force  # No compression for low latency

        # Network TCP optimizations
        netsh int tcp set global autotuninglevel=normal
        netsh int tcp set global rss=enabled
        netsh int tcp set global ecncapability=enabled
        netsh int tcp set global timestamps=disabled
        netsh int tcp set global rsc=enabled
        netsh int tcp set global fastopen=enabled
        netsh int tcp set global initialRto=300
        netsh int ip set global taskoffload=enabled

        # MTU setting for Ethernet adapter
        $adapter = Get-NetAdapter | Where-Object { $_.Name -like "*Ethernet*" -and $_.Status -eq "Up" } | Select-Object -First 1
        if ($adapter) {
          netsh interface ipv4 set subinterface $adapter.InterfaceDescription mtu=1500 store=persistent
        }

        # Disable delayed ACK and Nagle's algorithm
        $adapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
        foreach ($adapter in $adapters) {
          $interface = "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\$($adapter.InterfaceGuid)"
          if (-not (Test-Path $interface)) { New-Item -Path $interface -Force }
          Set-ItemProperty -Path $interface -Name "TcpAckFrequency" -Value 1 -Type DWord -Force
          Set-ItemProperty -Path $interface -Name "TcpDelAckTicks" -Value 0 -Type DWord -Force
          Set-ItemProperty -Path $interface -Name "TCPNoDelay" -Value 1 -Type DWord -Force
        }

        # Multimedia optimizations
        $mmPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile"
        Set-ItemProperty -Path $mmPath -Name "NetworkThrottlingIndex" -Value 0xffffffff -Type DWord -Force
        Set-ItemProperty -Path $mmPath -Name "SystemResponsiveness" -Value 0 -Type DWord -Force

        # Game/multimedia task priorities
        $gamesPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games"
        if (-not (Test-Path $gamesPath)) { New-Item -Path $gamesPath -Force }
        Set-ItemProperty -Path $gamesPath -Name "Affinity" -Value 0 -Type DWord -Force
        Set-ItemProperty -Path $gamesPath -Name "GPU Priority" -Value 8 -Type DWord -Force
        Set-ItemProperty -Path $gamesPath -Name "Priority" -Value 6 -Type DWord -Force
        Set-ItemProperty -Path $gamesPath -Name "Scheduling Category" -Value "High" -Type String -Force
        Set-ItemProperty -Path $gamesPath -Name "SFIO Priority" -Value "High" -Type String -Force
        Set-ItemProperty -Path $gamesPath -Name "Background Only" -Value "False" -Type String -Force
        Set-ItemProperty -Path $gamesPath -Name "Clock Rate" -Value 10000 -Type DWord -Force
        Set-ItemProperty -Path $gamesPath -Name "Latency Sensitive" -Value "True" -Type String -Force

        # Set power plan to High Performance
        powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c

        # Disable visual effects for performance
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -Type DWord -Force

        # Disable unnecessary services
        $servicesToDisable = @("SysMain", "WSearch", "DiagTrack", "dmwappushservice", "lfsvc", "MapsBroker", "XblAuthManager", "XblGameSave")
        foreach ($service in $servicesToDisable) {
          if (Get-Service -Name $service -ErrorAction SilentlyContinue) {
            Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
          }
        }

        # Enable UDP over RDP
        Set-ItemProperty -Path $tsPath -Name "SelectTransport" -Value 0 -Type DWord -Force
        Enable-NetFirewallRule -DisplayName "Remote Desktop - User Mode (UDP-In)" -ErrorAction SilentlyContinue

        # Install Remote Desktop Services role if needed
        Install-WindowsFeature -Name RDS-RD-Server -IncludeManagementTools -Restart:$false -ErrorAction SilentlyContinue

    - name: Enable Windows Audio Services
      run: |
        # Core audio services
        Set-Service -Name "Audiosrv" -StartupType Automatic
        Start-Service -Name "Audiosrv" -ErrorAction SilentlyContinue
        Set-Service -Name "AudioEndpointBuilder" -StartupType Automatic
        Start-Service -Name "AudioEndpointBuilder" -ErrorAction SilentlyContinue

        # RDP audio redirection service
        Set-Service -Name "UmRdpService" -StartupType Automatic
        Start-Service -Name "UmRdpService" -ErrorAction SilentlyContinue

        # Remote Registry for sharing
        Set-Service -Name "RemoteRegistry" -StartupType Automatic
        Start-Service -Name "RemoteRegistry" -ErrorAction SilentlyContinue

        # Rescan devices
        pnputil /scan-devices

    - name: Create RDP User
      run: |
        $securePassword = ConvertTo-SecureString "${{ secrets.RDP_PASSWORD }}" -AsPlainText -Force
        New-LocalUser -Name "mainadmin" -Password $securePassword -FullName "RDP Admin" -Description "RDP access user" -AccountNeverExpires -PasswordNeverExpires
        Add-LocalGroupMember -Group "Administrators" -Member "mainadmin"

    - name: Download OpenVPN Connect
      run: |
        Invoke-WebRequest -Uri "https://openvpn.net/downloads/openvpn-connect-v3-windows.msi" -OutFile "openvpn-connect.msi"

    - name: Install OpenVPN Connect
      run: |
        msiexec /i openvpn-connect.msi /qn /norestart
        # Note: To prevent RDP disconnection on VPN connect, configure split tunneling in your .ovpn profile (e.g., add 'pull-filter ignore "redirect-gateway"') manually via RDP after setup.

    - name: Download Bore Tool
      run: |
        $boreUrl = "https://github.com/ekzhang/bore/releases/download/v0.6.0/bore-v0.6.0-x86_64-pc-windows-msvc.zip"
        Invoke-WebRequest -Uri $boreUrl -OutFile "bore.zip"
        Expand-Archive bore.zip -DestinationPath . -Force
        $boreExe = Get-ChildItem -Recurse -Filter "bore.exe" | Select-Object -First 1
        if ($boreExe) {
          Move-Item -Path $boreExe.FullName -Destination . -Force
        } else {
          Write-Error "Failed to find bore.exe"
          exit 1
        }

    - name: Start Bore Tunnel
      run: |
        Write-Output "RDP User: mainadmin"
        Write-Output "Password is retrieved from secrets"
        Write-Output "For audio in RDP, set 'Sound' to 'Play on this computer' in client local resources tab."
        Start-Process -FilePath ".\bore.exe" -ArgumentList "local 3389 --to bore.pub" -NoNewWindow
        Write-Output "Maintaining RDP connection... Cancel workflow manually"
        while ($true) {
          Start-Sleep -Seconds 60
          Write-Output "$(Get-Date): Maintaining RDP connection..."
        }
