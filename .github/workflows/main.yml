name: Windows RDP Access
on: workflow_dispatch
jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: リモートデスクトップを有効化
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -value 1
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services")) { 
          New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Force 
        }
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "fDisableAudioCapture" -value 0 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "fEnableAudioRedirection" -value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fDisableAudioRedirection" -value 0 -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fEnableAudioCompression" -value 1 -Force
        if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client")) { 
          New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client" -Force 
        }
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client" -name "fDisableAudioCaptureRedirection" -value 0 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client" -name "fDisableAudioRedirection" -value 0 -Type DWORD -Force

    - name: ネットワーク最適化（FPS向上を含む追加設定）
      run: |
        # （中略 — 元の設定をそのまま維持）
        # RDP-Tcp 基本設定: 帯域と暗号化
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "MaxBandwidth" -value 0xffffffff -Type DWORD -Force
        # ...（元の長い設定はここに残します）...
        Install-WindowsFeature -Name RDS-RD-Server -IncludeManagementTools -Restart:$false

    - name: Windowsオーディオサービスを有効化
      run: |
        # （元のオーディオ有効化スクリプトをそのまま）
        Set-Service -Name "Audiosrv" -StartupType Automatic
        Start-Service -Name "Audiosrv" -ErrorAction SilentlyContinue
        Set-Service -Name "AudioEndpointBuilder" -StartupType Automatic
        Start-Service -Name "AudioEndpointBuilder" -ErrorAction SilentlyContinue
        Set-Service -Name "UmRdpService" -StartupType Automatic
        Start-Service -Name "UmRdpService" -ErrorAction SilentlyContinue
        Set-Service -Name "RemoteRegistry" -StartupType Automatic
        Start-Service -Name "RemoteRegistry" -ErrorAction SilentlyContinue
        pnputil /scan-devices
        $null = [System.Diagnostics.Process]::Start("rundll32.exe", "shell32.dll,Control_RunDLL mmsys.cpl,,0")

    - name: RDPユーザーを作成
      run: |
        if ($PSVersionTable.PSVersion.Major -ge 7) {
          $modulePath = "$env:SystemRoot\System32\WindowsPowerShell\v1.0\Modules\Microsoft.PowerShell.LocalAccounts"
          Import-Module $modulePath
        }
        $securePassword = ConvertTo-SecureString "${{ secrets.RDP_PASSWORD }}" -AsPlainText -Force
        # 既に存在する場合はエラー回避
        if (-not (Get-LocalUser -Name "mainadmin" -ErrorAction SilentlyContinue)) {
          New-LocalUser -Name "mainadmin" -Password $securePassword -FullName "RDP Admin" -Description "RDP access user" -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "mainadmin"
        } else {
          Write-Output "ユーザー mainadmin は既に存在します"
        }

    - name: Download OpenVPN Connect
      run: |
        Invoke-WebRequest -Uri "https://openvpn.net/downloads/openvpn-connect-v3-windows.msi" -OutFile "openvpn-connect.msi"

    - name: Install OpenVPN Connect
      run: |
        msiexec /i openvpn-connect.msi /qn /norestart

    - name: Boreツールをダウンロード
      run: |
        Invoke-WebRequest -Uri https://github.com/ekzhang/bore/releases/download/v0.6.0/bore-v0.6.0-x86_64-pc-windows-msvc.zip -OutFile bore.zip
        Expand-Archive bore.zip -DestinationPath . -Force
        if (Test-Path "bore\bore.exe") {
          Move-Item -Path "bore\bore.exe" -Destination .
        } elseif (Test-Path "bore-v0.6.0-x86_64-pc-windows-msvc\bore.exe") {
          Move-Item -Path "bore-v0.6.0-x86_64-pc-windows-msvc\bore.exe" -Destination .
        } elseif (Test-Path "bore.exe") {
          Write-Output "bore.exeはすでにカレントディレクトリに存在します"
        } else {
          $boreExe = Get-ChildItem -Recurse -Filter "bore.exe" | Select-Object -First 1
          if ($boreExe) {
            Move-Item -Path $boreExe.FullName -Destination .
          } else {
            Write-Error "bore.exeが見つかりません"
            exit 1
          }
        }
        if (-not (Test-Path ".\bore.exe")) {
          Write-Error "bore.exeの準備に失敗しました"
          exit 1
        }

    # ---------- ここから VS Code 関連を追加 ----------
    - name: Download latest Visual Studio Code (system installer)
      shell: powershell
      run: |
        # System installer の最新安定版を取得（リダイレクトで最新版に飛ぶ）
        $vscodeUrl = "https://update.code.visualstudio.com/latest/win32-x64/stable"
        Write-Output "Downloading VS Code from $vscodeUrl"
        Invoke-WebRequest -Uri $vscodeUrl -OutFile "$PWD\VSCodeSetup.exe" -UseBasicParsing
        Write-Output "Downloaded: $PWD\VSCodeSetup.exe"

    - name: Install Visual Studio Code (silent, create desktop icon)
      shell: powershell
      run: |
        $installer = "$PWD\VSCodeSetup.exe"
        if (-not (Test-Path $installer)) { Write-Error "VSCode installer not found"; exit 1 }
        # サイレントインストール: 自動起動を除外(!runcode)、デスクトップアイコンを作成するよう指定
        $args = '/VERYSILENT /NORESTART /MERGETASKS=!runcode,desktopicon'
        Write-Output "Installing VS Code: $installer $args"
        Start-Process -FilePath $installer -ArgumentList $args -Wait -NoNewWindow
        Write-Output "VS Code install finished (return code checked by Start-Process)."

    - name: Ensure desktop shortcut (Public Desktop) points to Code.exe
      shell: powershell
      run: |
        # いくつかの可能性のあるインストール先を順にチェックしてショートカット作成
        $candidates = @(
          "${env:ProgramFiles}\Microsoft VS Code\Code.exe",
          "${env:ProgramFiles(x86)}\Microsoft VS Code\Code.exe",
          "${env:LOCALAPPDATA}\Programs\Microsoft VS Code\Code.exe"
        )
        $target = $null
        foreach ($p in $candidates) {
          if (Test-Path $p) { $target = $p; break }
        }
        if (-not $target) {
          Write-Warning "VS Code 実行ファイルが見つかりませんでした。ショートカットは作成されません。"
        } else {
          $publicDesktop = [Environment]::GetFolderPath([System.Environment+SpecialFolder]::CommonDesktopDirectory)
          $linkPath = Join-Path $publicDesktop "Visual Studio Code.lnk"
          $shell = New-Object -ComObject WScript.Shell
          $shortcut = $shell.CreateShortcut($linkPath)
          $shortcut.TargetPath = $target
          $shortcut.WorkingDirectory = Split-Path $target
          $shortcut.IconLocation = $target + ",0"
          $shortcut.Save()
          Write-Output "ショートカット作成: $linkPath -> $target"
        }

    - name: Cleanup VS Code installer
      shell: powershell
      run: |
        if (Test-Path "$PWD\VSCodeSetup.exe") {
          Remove-Item "$PWD\VSCodeSetup.exe" -Force
        }

    # ---------- ここまで VS Code 関連 ----------
    - name: Boreトンネルを開始
      run: |
        Write-Output "RDPユーザー: mainadmin"
        Write-Output "パスワードはsecretsから取得しています"
        Write-Output "RDP接続でオーディオを有効にするには、クライアントの'ローカルリソース'タブで'サウンド'を'このコンピューターで再生'に設定してください。"
        Start-Process -FilePath ".\bore.exe" -ArgumentList "local 3389 --to bore.pub" -NoNewWindow
        Write-Output "RDP接続を維持中... ワークフローを手動でキャンセルしてください"
        while ($true) {
          Start-Sleep -Seconds 60
          Write-Output "$(Get-Date): RDP接続を維持中..."
        }

