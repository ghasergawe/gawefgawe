name: Windows RDP Access
on: workflow_dispatch

jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: リモートデスクトップを有効化
      shell: pwsh
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -value 1
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services")) { 
          New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Force 
        }
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "fDisableAudioCapture" -value 0 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "fEnableAudioRedirection" -value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fDisableAudioRedirection" -value 0 -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fEnableAudioCompression" -value 1 -Force
        # クライアント側オーディオキャプチャリダイレクト有効化
        if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client")) { 
          New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client" -Force 
        }
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client" -name "fDisableAudioCaptureRedirection" -value 0 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client" -name "fDisableAudioRedirection" -value 0 -Type DWORD -Force

    - name: ネットワーク最適化（FPS向上を含む追加設定）
      shell: pwsh
      run: |
        # RDP-Tcp 基本設定: 帯域と暗号化
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "MaxBandwidth" -value 0xffffffff -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "MinEncryptionLevel" -value 2 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "ColorDepth" -value 4 -Type DWORD -Force  # 24-bit color depth
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "DisableWallpaper" -value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "DisableFullWindowDrag" -value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "DisableMenuAnims" -value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "DisableThemes" -value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "DisableCursorSetting" -value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fDisableClip" -value 0 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "FlowControlDisplayBandwidth" -value 255 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "FlowControlChannelBandwidth" -value 255 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "FlowControlChargePostCompression" -value 0 -Type DWORD -Force
        # H.264/AVC コーデック優先（2025年のServer/クライアントで有効な場合）
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "AVCHardwareEncodePreferred" -value 1 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "PrioritizeH264AVC444" -value 1 -Type DWORD -Force
        # 視覚品質と圧縮（低レイテンシ優先）
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "VisualQuality" -value 1 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "MaxCompressionLevel" -value 0 -Type DWORD -Force
        # ネットワークTCP最適化（自動チューニング等）
        netsh int tcp set global autotuninglevel=normal
        netsh int tcp set global rss=enabled
        netsh int tcp set global ecncapability=enabled
        netsh int tcp set global timestamps=disabled
        netsh int tcp set global rsc=enabled
        netsh int tcp set global fastopen=enabled
        netsh int tcp set global initialRto=300
        netsh int ip set global taskoffload=enabled
        # MTU設定（Ethernetアダプタ）
        $adapter = Get-NetAdapter | Where-Object { $_.Name -like "*Ethernet*" -and $_.Status -eq "Up" } | Select-Object -First 1
        if ($adapter) {
          netsh interface ipv4 set subinterface $adapter.InterfaceDescription mtu=1500 store=persistent
        }
        # 遅延ACK無効とNagleアルゴリズム無効
        $adapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
        foreach ($adapter in $adapters) {
          $interface = "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\$($adapter.InterfaceGuid)"
          if (-not (Test-Path $interface)) { New-Item -Path $interface -Force }
          Set-ItemProperty -Path $interface -name "TcpAckFrequency" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path $interface -name "TcpDelAckTicks" -value 0 -Type DWORD -Force
          Set-ItemProperty -Path $interface -name "TCPNoDelay" -value 1 -Type DWORD -Force
        }
        # マルチメディア最適化
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -name "NetworkThrottlingIndex" -value 0xffffffff -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -name "SystemResponsiveness" -value 0 -Type DWORD -Force
        # ゲーム/マルチメディアタスク優先
        $gamesPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games"
        if (-not (Test-Path $gamesPath)) { New-Item -Path $gamesPath -Force }
        Set-ItemProperty -Path $gamesPath -name "Affinity" -value 0 -Type DWORD -Force
        Set-ItemProperty -Path $gamesPath -name "GPU Priority" -value 8 -Type DWORD -Force
        Set-ItemProperty -Path $gamesPath -name "Priority" -value 6 -Type DWORD -Force
        Set-ItemProperty -Path $gamesPath -name "Scheduling Category" -value "High" -Type String -Force
        Set-ItemProperty -Path $gamesPath -name "SFIO Priority" -value "High" -Type String -Force
        Set-ItemProperty -Path $gamesPath -name "Background Only" -value "False" -Type String -Force
        Set-ItemProperty -Path $gamesPath -name "Clock Rate" -value 10000 -Type DWORD -Force
        Set-ItemProperty -Path $gamesPath -name "Latency Sensitive" -value "True" -Type String -Force
        # パワープランをHigh Performanceに設定
        powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
        # 視覚効果無効（パフォーマンス向上）
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -name "VisualFXSetting" -value 2 -Type DWORD -Force
        # 不要サービス無効
        $servicesToDisable = @("SysMain", "WSearch", "DiagTrack", "dmwappushservice", "lfsvc", "MapsBroker", "XblAuthManager", "XblGameSave")
        foreach ($service in $servicesToDisable) {
          if (Get-Service -Name $service -ErrorAction SilentlyContinue) {
            Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
          }
        }
        # UDP over RDP有効
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "SelectTransport" -value 0 -Type DWORD -Force
        Enable-NetFirewallRule -DisplayName "Remote Desktop - User Mode (UDP-In)" -ErrorAction SilentlyContinue
        # Remote Desktop Services ロールをインストール（サーバー系で有効）
        Install-WindowsFeature -Name RDS-RD-Server -IncludeManagementTools -Restart:$false

    - name: Windowsオーディオサービスを有効化
      shell: pwsh
      run: |
        Set-Service -Name "Audiosrv" -StartupType Automatic
        Start-Service -Name "Audiosrv" -ErrorAction SilentlyContinue
        Set-Service -Name "AudioEndpointBuilder" -StartupType Automatic
        Start-Service -Name "AudioEndpointBuilder" -ErrorAction SilentlyContinue
        Set-Service -Name "UmRdpService" -StartupType Automatic
        Start-Service -Name "UmRdpService" -ErrorAction SilentlyContinue
        Set-Service -Name "RemoteRegistry" -StartupType Automatic
        Start-Service -Name "RemoteRegistry" -ErrorAction SilentlyContinue
        pnputil /scan-devices
        $null = [System.Diagnostics.Process]::Start("rundll32.exe", "shell32.dll,Control_RunDLL mmsys.cpl,,0")

    - name: RDPユーザーを作成
      shell: pwsh
      run: |
        if ($PSVersionTable.PSVersion.Major -ge 7) {
          $modulePath = "$env:SystemRoot\System32\WindowsPowerShell\v1.0\Modules\Microsoft.PowerShell.LocalAccounts"
          Import-Module $modulePath
        }
        $securePassword = ConvertTo-SecureString "${{ secrets.RDP_PASSWORD }}" -AsPlainText -Force
        # mainadmin を作成して Administrators に追加
        if (-not (Get-LocalUser -Name "mainadmin" -ErrorAction SilentlyContinue)) {
          New-LocalUser -Name "mainadmin" -Password $securePassword -FullName "RDP Admin" -Description "RDP access user" -AccountNeverExpires -PasswordNeverExpires
        }
        if (-not (Get-LocalGroupMember -Group "Administrators" -Member "mainadmin" -ErrorAction SilentlyContinue)) {
          Add-LocalGroupMember -Group "Administrators" -Member "mainadmin"
        }

    - name: Install Visual Studio Code (latest) via winget and create Desktop shortcuts
      shell: pwsh
      run: |
        # --- winget があるかチェック。なければ App Installer (msixbundle) を GitHub releases からダウンロードして追加インストールを試みる ---
        if (-not (Get-Command winget.exe -ErrorAction SilentlyContinue)) {
          Write-Output "winget が見つかりません。App Installer (msixbundle) をダウンロードしてインストールします..."
          $msixUrl = "https://github.com/microsoft/winget-cli/releases/latest/download/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"
          $msixLocal = Join-Path $env:TEMP "Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"
          Invoke-WebRequest -UseBasicParsing -Uri $msixUrl -OutFile $msixLocal -ErrorAction Stop
          try {
            Add-AppxPackage -Path $msixLocal -ErrorAction Stop
            Write-Output "App Installer(msixbundle) をインストールしました。"
          } catch {
            Write-Warning "App Installer のインストールに失敗しました: $_"
            Write-Warning "winget が利用できない場合、以降の winget インストールは失敗する可能性があります。"
          }
        } else {
          Write-Output "winget が見つかりました: $(Get-Command winget.exe)."
        }

        # --- VS Code を winget でインストール（安定版: Microsoft.VisualStudioCode） ---
        # -e: exact match、--accept-* はライセンス/ソース同意（無人インストール用）
        # --silent は存在するバージョンでサポートされていればサイレント動作を試みる（なくても動く）
        try {
          winget install --id Microsoft.VisualStudioCode -e --accept-package-agreements --accept-source-agreements --silent
        } catch {
          Write-Warning "winget install 実行時にエラーが発生しました。再試行（--silent なし）..."
          winget install --id Microsoft.VisualStudioCode -e --accept-package-agreements --accept-source-agreements
        }

        # --- Code.exe の所在を探索してショートカットを作成（mainadmin と Public Desktop） ---
        $possible = @(
          "C:\Program Files\Microsoft VS Code\Code.exe",
          "$env:LOCALAPPDATA\Programs\Microsoft VS Code\Code.exe",
          "C:\Program Files (x86)\Microsoft VS Code\Code.exe"
        )
        $target = $possible | Where-Object { Test-Path $_ } | Select-Object -First 1
        if (-not $target) {
          # PATH に登録されていれば取得
          $cmd = Get-Command code -ErrorAction SilentlyContinue
          if ($cmd) { $target = $cmd.Source }
        }
        if (-not $target) {
          Write-Error "Visual Studio Code の実行ファイル (Code.exe) が見つかりません。インストールに失敗している可能性があります。"
          exit 1
        }

        $shell = New-Object -ComObject WScript.Shell

        # mainadmin 用デスクトップと Public デスクトップ両方にショートカットを作成
        $destUsers = @("mainadmin", "Public")
        foreach ($u in $destUsers) {
          if ($u -eq "Public") {
            $desktopPath = [Environment]::GetFolderPath("CommonDesktopDirectory")
          } else {
            $desktopPath = Join-Path -Path "C:\Users" -ChildPath $u
            $desktopPath = Join-Path -Path $desktopPath -ChildPath "Desktop"
          }
          if (-not (Test-Path $desktopPath)) {
            New-Item -ItemType Directory -Path $desktopPath -Force | Out-Null
          }
          $lnk = Join-Path $desktopPath "Visual Studio Code.lnk"
          $sc = $shell.CreateShortcut($lnk)
          $sc.TargetPath = $target
          $sc.WorkingDirectory = Split-Path $target
          $sc.IconLocation = "$target,0"
          $sc.Save()
          Write-Output "ショートカットを作成しました: $lnk"
        }

    - name: Download OpenVPN Connect
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://openvpn.net/downloads/openvpn-connect-v3-windows.msi" -OutFile "openvpn-connect.msi"

    - name: Install OpenVPN Connect
      shell: pwsh
      run: |
        msiexec /i openvpn-connect.msi /qn /norestart

    - name: Boreツールをダウンロード
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri https://github.com/ekzhang/bore/releases/download/v0.6.0/bore-v0.6.0-x86_64-pc-windows-msvc.zip -OutFile bore.zip
        Expand-Archive bore.zip -DestinationPath . -Force
        if (Test-Path "bore\bore.exe") {
          Move-Item -Path "bore\bore.exe" -Destination .
        } elseif (Test-Path "bore-v0.6.0-x86_64-pc-windows-msvc\bore.exe") {
          Move-Item -Path "bore-v0.6.0-x86_64-pc-windows-msvc\bore.exe" -Destination .
        } elseif (Test-Path "bore.exe") {
          Write-Output "bore.exeはすでにカレントディレクトリに存在します"
        } else {
          $boreExe = Get-ChildItem -Recurse -Filter "bore.exe" | Select-Object -First 1
          if ($boreExe) {
            Move-Item -Path $boreExe.FullName -Destination .
          } else {
            Write-Error "bore.exeが見つかりません"
            exit 1
          }
        }
        if (-not (Test-Path ".\bore.exe")) {
          Write-Error "bore.exeの準備に失敗しました"
          exit 1
        }

    - name: Boreトンネルを開始
      shell: pwsh
      run: |
        Write-Output "RDPユーザー: mainadmin"
        Write-Output "パスワードはsecretsから取得しています"
        Write-Output "RDP接続でオーディオを有効にするには、クライアントの'ローカルリソース'タブで'サウンド'を'このコンピューターで再生'に設定してください。"
        Start-Process -FilePath ".\bore.exe" -ArgumentList "local 3389 --to bore.pub" -NoNewWindow
        Write-Output "RDP接続を維持中... ワークフローを手動でキャンセルしてください"
        while ($true) {
          Start-Sleep -Seconds 60
          Write-Output "$(Get-Date): RDP接続を維持中..."
        }

