name: Windows RDP & Web Access
on: workflow_dispatch
jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        
      - name: リモートデスクトップを有効化
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -value 1
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services")) { New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Force }
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "fDisableAudioCapture" -value 0 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "fEnableAudioRedirection" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fDisableAudioRedirection" -value 0 -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fEnableAudioCompression" -value 1 -Force
          
      - name: ネットワーク最適化（FPS向上を含む追加設定）
        run: |
          # 既存の最適化
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "MaxBandwidth" -value 0xffffffff -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "MinEncryptionLevel" -value 2 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "ColorDepth" -value 4 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "DisableWallpaper" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "DisableFullWindowDrag" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "DisableMenuAnims" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "DisableThemes" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "DisableCursorSetting" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "PerfDisableVSync" -value 1 -Type DWORD -Force
          netsh int tcp set global autotuninglevel=normal
          netsh int tcp set global chimney=enabled
          netsh int tcp set global dca=enabled
          netsh int tcp set global netdma=enabled
          netsh int tcp set global congestionprovider=ctcp
          netsh interface ipv4 set subinterface "Ethernet" mtu=1500 store=persistent
          Set-Service -Name "SysMain" -StartupType Disabled
          Stop-Service -Name "SysMain" -Force
          Set-Service -Name "WSearch" -StartupType Disabled
          Stop-Service -Name "WSearch" -Force
          powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations' -name "DWMFRAMEINTERVAL" -value 5 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "AVCHardwareEncodePreferred" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "PrioritizeH264AVC444" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "fEnableVirtualizedGraphics" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fDisableClip" -value 0 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "FlowControlDisplayBandwidth" -value 255 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "FlowControlChannelBandwidth" -value 255 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "FlowControlChargePostCompression" -value 0 -Type DWORD -Force
          netsh int tcp set global rss=enabled
          netsh int tcp set global ecncapability=enabled
          netsh int tcp set global timestamps=disabled
          netsh int tcp set global rsc=enabled
          netsh int ip set global taskoffload=enabled
          netsh int tcp set global initialRto=300
          netsh int tcp set global fastopen=enabled
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "MaxCompressionLevel" -value 0 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -name "NetworkThrottlingIndex" -value 0xffffffff -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -name "SystemResponsiveness" -value 0 -Type DWORD -Force
          $adapters = Get-NetAdapter | Where-Object {$_.Status -eq "Up"}
          foreach ($adapter in $adapters) {
            $interface = "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\$($adapter.InterfaceGuid)"
            if (-not (Test-Path $interface)) { New-Item -Path $interface -Force }
            Set-ItemProperty -Path $interface -name "TcpAckFrequency" -value 1 -Type DWORD -Force
            Set-ItemProperty -Path $interface -name "TcpDelAckTicks" -value 0 -Type DWORD -Force
            Set-ItemProperty -Path $interface -name "TCPNoDelay" -value 1 -Type DWORD -Force
          }
          $gamesPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games"
          if (-not (Test-Path $gamesPath)) { New-Item -Path $gamesPath -Force }
          Set-ItemProperty -Path $gamesPath -name "Affinity" -value 0 -Type DWORD -Force
          Set-ItemProperty -Path $gamesPath -name "GPU Priority" -value 8 -Type DWORD -Force
          Set-ItemProperty -Path $gamesPath -name "Priority" -value 6 -Type DWORD -Force
          Set-ItemProperty -Path $gamesPath -name "Scheduling Category" -value "High" -Type String -Force
          Set-ItemProperty -Path $gamesPath -name "SFIO Priority" -value "High" -Type String -Force
          Set-ItemProperty -Path $gamesPath -name "Background Only" -value "False" -Type String -Force
          Set-ItemProperty -Path $gamesPath -name "Clock Rate" -value 10000 -Type DWORD -Force
          Set-ItemProperty -Path $gamesPath -name "Latency Sensitive" -value "True" -Type String -Force
          $servicesToDisable = @("DiagTrack", "dmwappushservice", "lfsvc", "MapsBroker", "XblAuthManager", "XblGameSave")
          foreach ($service in $servicesToDisable) {
            if (Get-Service -Name $service -ErrorAction SilentlyContinue) {
              Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
              Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
            }
          }
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "SelectTransport" -value 0 -Type DWORD -Force
          Enable-NetFirewallRule -DisplayName "Remote Desktop - User Mode (UDP-In)"
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "EnableRemoteFXProgressiveCodec" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "VisualQuality" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -name "VisualFXSetting" -value 2 -Type DWORD -Force
          
      - name: Windowsオーディオサービスを有効化
        run: |
          Set-Service -Name "Audiosrv" -StartupType Automatic
          Start-Service -Name "Audiosrv"
          Set-Service -Name "AudioEndpointBuilder" -StartupType Automatic
          Start-Service -Name "AudioEndpointBuilder"
          
      - name: RDPユーザーを作成
        run: |
          if ($PSVersionTable.PSVersion.Major -ge 7) {
            $modulePath = "$env:SystemRoot\System32\WindowsPowerShell\v1.0\Modules\Microsoft.PowerShell.LocalAccounts"
            Import-Module $modulePath
          }
          $securePassword = ConvertTo-SecureString "${{ secrets.RDP_PASSWORD }}" -AsPlainText -Force
          New-LocalUser -Name "mainadmin" -Password $securePassword -FullName "RDP Admin" -Description "RDP access user" -AccountNeverExpires -PasswordNeverExpires
          Add-Invalid workflow file
(Line: 284, Col: 1): 'on' is already defined, (Line: 285, Col: 1): 'jobs' is already definedLocalGroupMember -Group "Administrators" -Member "mainadmin"
          
      - name: VNCサーバーをインストール
        run: |
          # Chocolateyをインストール
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # VNCサーバーをインストール (TightVNC)
          choco install tightvnc -y
          
          # VNCサーバーを設定
          $vncConfigPath = "$env:ProgramFiles\TightVNC\tvnserver.exe"
          & $vncConfigPath -setcontrolpassword -password "${{ secrets.RDP_PASSWORD }}"
          & $vncConfigPath -setviewonlypassword -password "${{ secrets.RDP_PASSWORD }}"
          & $vncConfigPath -service -install
          & $vncConfigPath -service -start
          
          # ファイアウォールでVNCポートを開放
          New-NetFirewallRule -DisplayName "TightVNC" -Direction Inbound -Protocol TCP -LocalPort 5900 -Action Allow
          
      - name: noVNCをダウンロードと設定
        run: |
          # noVNCをダウンロード
          Invoke-WebRequest -Uri https://github.com/novnc/noVNC/archive/refs/tags/v1.4.0.zip -OutFile novnc.zip
          Expand-Archive novnc.zip -DestinationPath . -Force
          Rename-Item -Path "noVNC-1.4.0" -NewName "novnc"
          
          # Websockifyをダウンロード
          Invoke-WebRequest -Uri https://github.com/novnc/websockify/archive/refs/tags/v0.11.0.zip -OutFile websockify.zip
          Expand-Archive websockify.zip -DestinationPath . -Force
          Rename-Item -Path "websockify-0.11.0" -NewName "websockify"
          
          # Pythonをインストール (websockify実行用)
          choco install python -y
          
          # 簡易的なHTMLファイルを作成してVNC接続情報を埋め込み
          $htmlContent = @"
          <!DOCTYPE html>
          <html>
          <head>
              <title>Windows Remote Desktop</title>
              <meta charset="utf-8">
              <style>
                  body {
                      margin: 0;
                      padding: 0;
                      font-family: Arial, sans-serif;
                      background-color: #f0f0f0;
                  }
                  .container {
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      height: 100vh;
                  }
                  .info-box {
                      background-color: white;
                      padding: 20px;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      margin-bottom: 20px;
                      max-width: 600px;
                      text-align: center;
                  }
                  .vnc-container {
                      width: 800px;
                      height: 600px;
                      border: 1px solid #ccc;
                  }
                  button {
                      background-color: #4CAF50;
                      color: white;
                      padding: 10px 20px;
                      border: none;
                      border-radius: 4px;
                      cursor: pointer;
                      font-size: 16px;
                      margin: 10px 0;
                  }
                  button:hover {
                      background-color: #45a049;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="info-box">
                      <h1>Windows Remote Desktop Access</h1>
                      <p>このページはGitHub Actionsで自動的に作成されました。</p>
                      <p>ユーザー名: mainadmin</p>
                      <p>パスワード: リポジトリのシークレットに設定された値</p>
                      <p>以下のボタンをクリックしてリモートデスクトップに接続してください。</p>
                      <button id="connectBtn">VNCで接続</button>
                  </div>
                  <div id="vnc" class="vnc-container"></div>
              </div>
              
              <script src="novnc/vnc.js"></script>
              <script>
                  document.getElementById('connectBtn').addEventListener('click', function() {
                      var rfb = new RFB(document.getElementById('vnc'), 'ws://' + window.location.hostname + ':6080/websockify');
                      rfb.addEventListener('connect',  function() { console.log("Connected"); });
                      rfb.addEventListener('disconnect', function() { console.log("Disconnected"); });
                      rfb.addEventListener('credentialsrequired', function() {
                          rfb.sendCredentials({ password: "${{ secrets.RDP_PASSWORD }}" });
                      });
                      rfb.resizeSession = true;
                  });
              </script>
          </body>
          </html>
          "@
          
          # HTMLファイルを保存
          Set-Content -Path "./novnc/index.html" -Value $htmlContent
          
      - name: Python HTTPサーバーを起動
        run: |
          # Python HTTPサーバーを起動 (ポート8000)
          Start-Process python -ArgumentList "-m", "http.server", "8000", "--directory", "./novnc" -NoNewWindow
          
      - name: Websockifyを起動
        run: |
          # websockifyを起動 (VNCポート5900をWebSocketポート6080に変換)
          cd websockify
          python run.py 6080 localhost:5900 --web ../novnc
          
      - name: Boreツールをダウンロード
        run: |
          Invoke-WebRequest -Uri https://github.com/ekzhang/bore/releases/download/v0.5.0/bore-v0.5.0-x86_64-pc-windows-msvc.zip -OutFile bore.zip
          Expand-Archive bore.zip -DestinationPath . -Force
          if (Test-Path "bore\bore.exe") {
            Move-Item -Path "bore\bore.exe" -Destination .
          } elseif (Test-Path "bore-v0.5.0-x86_64-pc-windows-msvc\bore.exe") {
            Move-Item -Path "bore-v0.5.0-x86_64-pc-windows-msvc\bore.exe" -Destination .
          } elseif (Test-Path "bore.exe") {
            Write-Output "bore.exeはすでにカレントディレクトリに存在します"
          } else {
            $boreExe = Get-ChildItem -Recurse -Filter "bore.exe" | Select-Object -First 1
            if ($boreExe) {
              Move-Item -Path $boreExe.FullName -Destination .
            } else {
              Write-Error "bore.exeが見つかりません"
              exit 1
            }
          }
          if (-not (Test-Path ".\bore.exe")) {
            Write-Error "bore.exeの準備に失敗しました"
            exit 1
          }
          
      - name: Boreトンネルを開始
        run: |
          # RDP用のトンネル
          Start-Process -FilePath ".\bore.exe" -ArgumentList "local 3389 --to bore.pub" -NoNewWindow
          
          # Webサーバー用のトンネル
          Start-Process -FilePath ".\bore.exe" -ArgumentList "local 8000 --to bore.pub" -NoNewWindow
          
          # WebSocket用のトンネル
          Start-Process -FilePath ".\bore.exe" -ArgumentList "local 6080 --to bore.pub" -NoNewWindow
          
          Write-Output "RDPユーザー: mainadmin"
          Write-Output "パスワードはsecretsから取得しています"
          Write-Output "WebアクセスURL: http://bore.pub:xxxx (xxxxは上記のログで確認してください)"
          Write-Output "RDP接続を維持中... ワークフローを手動でキャンセルしてください"
          
          # ワークフローを継続的に実行し続けるための無限ループ
          while ($true) {
            Start-Sleep -Seconds 60
            Write-Output "$(Get-Date): RDP接続を維持中..."
          }
