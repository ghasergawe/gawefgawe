name: Optimized Windows RDP Access
on: workflow_dispatch
jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 99999  # 4時間タイムアウト（GitHubの6時間制限内）
    steps:
      - name: Enable Remote Desktop
        run: |
          # RDPを有効化
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -value 1
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          
          # UDPサポートを有効化
          Enable-NetFirewallRule -DisplayName "Remote Desktop - User Mode (UDP-In)"
          
          # RDPタイムアウト設定を調整
          if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services")) { 
            New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Force 
          }
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "MaxIdleTime" -value 0 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "MaxDisconnectionTime" -value 0 -Type DWORD -Force

      - name: Apply RDP Performance Optimizations
        run: |
          # GPUとRemoteFXの最適化（BetterRDP + TurboRemoteFXのベストプラクティス）
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "fEnableVirtualizedGraphics" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "AVC444ModePreferred" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "AVCHardwareEncodePreferred" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "MaxCompressionLevel" -value 2 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "ImageQuality" -value 2 -Type DWORD -Force
          
          # 60 FPS最適化
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "VGOptimization_CaptureFrameRate" -value 60 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations' -name "DWMFRAMEINTERVAL" -value 15 -Type DWORD -Force
          
          # ネットワーク最適化
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\TermDD" -name "FlowControlDisable" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\TermDD" -name "FlowControlDisplayBandwidth" -value 256 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\TermDD" -name "FlowControlChannelBandwidth" -value 144 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\TermDD" -name "FlowControlChargePostCompression" -value 0 -Type DWORD -Force
          
          # レイテンシ削減
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "InteractiveDelay" -value 0 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -name "SystemResponsiveness" -value 0 -Type DWORD -Force
          
          # ネットワークスループット最適化
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters" -name "DisableBandwidthThrottling" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters" -name "DisableLargeMtu" -value 0 -Type DWORD -Force
          
          # TCP最適化
          netsh int tcp set global autotuninglevel=normal
          netsh int tcp set global chimney=enabled
          netsh int tcp set global rss=enabled
          netsh int tcp set global fastopen=enabled
          netsh int tcp set global initialRto=200

      - name: Enable Windows Audio Services
        run: |
          Set-Service -Name "Audiosrv" -StartupType Automatic
          Start-Service -Name "Audiosrv"
          Set-Service -Name "AudioEndpointBuilder" -StartupType Automatic
          Start-Service -Name "AudioEndpointBuilder"

      - name: Create RDP User
        run: |
          $securePassword = ConvertTo-SecureString "${{ secrets.RDP_PASSWORD }}" -AsPlainText -Force
          New-LocalUser -Name "mainadmin" -Password $securePassword -FullName "RDP Admin" -Description "RDP access user" -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "mainadmin"

      - name: Get Public IP Address
        id: get_ip
        run: |
          $publicIp = Invoke-RestMethod -Uri "https://api.ipify.org"
          echo "PUBLIC_IP=$publicIp" >> $env:GITHUB_ENV
          echo "RDP IP Address: $publicIp"
          echo "RDP User: mainadmin"
          echo "Password: ${{ secrets.RDP_PASSWORD }}"

      - name: Display RDP Connection Info
        run: |
          echo "=========================================="
          echo "RDP Connection Information"
          echo "=========================================="
          echo "IP Address: $env:PUBLIC_IP"
          echo "Port: 3389"
          echo "Username: mainadmin"
          echo "Password: ${{ secrets.RDP_PASSWORD }}"
          echo "=========================================="
          echo "Connection command:"
          echo "mstsc /v:$env:PUBLIC_IP:3389"
          echo "=========================================="

      - name: Keep RDP Session Alive
        run: |
          $endTime = (Get-Date).AddHours(3.5)  # 3.5時間後に終了（タイムアウト前に余裕を持たせる）
          Write-Output "RDP session will end at: $endTime"
          
          while ((Get-Date) -lt $endTime) {
            # 軽量なアクティビティでセッションを維持
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Write-Output "[$timestamp] Keeping RDP session alive..."
            
            # 定期的に軽量なシステムチェックを実行
            $memory = Get-Counter '\Memory\Available MBytes' -ErrorAction SilentlyContinue
            $cpu = Get-Counter '\Processor(_Total)\% Processor Time' -ErrorAction SilentlyContinue
            
            if ($memory -and $cpu) {
              Write-Output "Memory: $($memory.CounterSamples[0].CookedValue) MB | CPU: $($cpu.CounterSamples[0].CookedValue)%"
            }
            
            # 5分ごとにチェック（負荷を軽減）
            Start-Sleep -Seconds 300
          }
          
          Write-Output "RDP session timeout reached. Ending workflow."

      - name: Cleanup
        if: always()
        run: |
          Write-Output "Cleaning up RDP session..."
          # ユーザーのセッションを終了
          $sessions = query session | Where-Object { $_ -match "mainadmin" }
          if ($sessions) {
            $sessionId = ($sessions -split '\s+')[2]
            if ($sessionId) {
              logoff $sessionId
              Write-Output "Logged out session $sessionId"
            }
          }
          Write-Output "Cleanup completed."
