name: Windows RDP & Web Access

on: workflow_dispatch

jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: リモートデスクトップを有効化
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -value 1
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services")) { New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Force }
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "fDisableAudioCapture" -value 0 -Type DWORD -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -name "fEnableAudioRedirection" -value 1 -Type DWORD -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fDisableAudioRedirection" -value 0 -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "fEnableAudioCompression" -value 1 -Force

      - name: ネットワーク最適化（FPS向上を含む追加設定）
        run: |
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "MaxBandwidth" -value 0xffffffff -Type DWORD -Force
          # ... (rest of the network optimization commands)

      - name: Windowsオーディオサービスを有効化
        run: |
          Set-Service -Name "Audiosrv" -StartupType Automatic
          Start-Service -Name "Audiosrv"
          Set-Service -Name "AudioEndpointBuilder" -StartupType Automatic
          Start-Service -Name "AudioEndpointBuilder"

      - name: RDPユーザーを作成
        run: |
          if ($PSVersionTable.PSVersion.Major -ge 7) {
            $modulePath = "$env:SystemRoot\System32\WindowsPowerShell\v1.0\Modules\Microsoft.PowerShell.LocalAccounts"
            Import-Module $modulePath
          }
          $securePassword = ConvertTo-SecureString "${{ secrets.RDP_PASSWORD }}" -AsPlainText -Force
          New-LocalUser -Name "mainadmin" -Password $securePassword -FullName "RDP Admin" -Description "RDP access user" -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "mainadmin"

      - name: VNCサーバーをインストール
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install tightvnc python312 ngrok -y
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          refreshenv
          $vncConfigPath = "$env:ProgramFiles\TightVNC\tvnserver.exe"
          & $vncConfigPath -setcontrolpassword -password "${{ secrets.RDP_PASSWORD }}"
          & $vncConfigPath -setviewonlypassword -password "${{ secrets.RDP_PASSWORD }}"
          & $vncConfigPath -service -install
          & $vncConfigPath -service -start
          New-NetFirewallRule -DisplayName "TightVNC" -Direction Inbound -Protocol TCP -LocalPort 5900 -Action Allow

      - name: numpyをインストール（Websockifyの警告回避）
        run: |
          python -m pip install numpy
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          refreshenv

      - name: noVNCをダウンロードと設定
        run: |
          Invoke-WebRequest -Uri https://github.com/novnc/noVNC/archive/refs/tags/v1.4.0.zip -OutFile novnc.zip
          Expand-Archive novnc.zip -DestinationPath . -Force
          Rename-Item -Path "noVNC-1.4.0" -NewName "novnc"
          Invoke-WebRequest -Uri https://github.com/novnc/websockify/archive/refs/tags/v0.11.0.zip -OutFile websockify.zip
          Expand-Archive websockify.zip -DestinationPath . -Force
          Rename-Item -Path "websockify-0.11.0" -NewName "websockify"

      - name: Websockifyを起動
        run: |
          cd websockify
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          refreshenv
          Start-Process python -ArgumentList "-m", "websockify", "6080", "localhost:5900", "--web", "../novnc" -NoNewWindow

      - name: ngrokを設定とトンネルを開始
        run: |
          ngrok config add-authtoken ${{ secrets.NGROK_AUTHTOKEN }}
          Start-Process ngrok -ArgumentList "http", "6080", "--log", "ngrok_web.log" -NoNewWindow
          Start-Process ngrok -ArgumentList "tcp", "3389", "--log", "ngrok_rdp.log" -NoNewWindow
          Start-Sleep -Seconds 15 # ngrokの起動とログ出力を待つ
          $web_log_content = Get-Content ngrok_web.log
          $web_url_match = $web_log_content | Select-String "url=https://.*\.ngrok.*"
          if ($web_url_match) {
            $web_url = ($web_url_match[-1].Line -replace '.*url[](https://.*\.ngrok.*?)(\s.*|$)', '$1').Trim()
          } else {
            Write-Error "Web URLの抽出に失敗しました"
            exit 1
          }
          $rdp_log_content = Get-Content ngrok_rdp.log
          $rdp_url_match = $rdp_log_content | Select-String "url=tcp://.*\.ngrok.*:\d+"
          if ($rdp_url_match) {
            $rdp_url = ($rdp_url_match[-1].Line -replace '.*url=(tcp://.*\.ngrok.*:\d+)(\s.*|$)', '$1').Trim()
            $rdp_host = $rdp_url -replace 'tcp://(.*):\d+', '$1'
            $rdp_port = $rdp_url -replace 'tcp://.*:(\d+)', '$1'
          } else {
            Write-Error "RDP URLの抽出に失敗しました"
            exit 1
          }
          Write-Output "RDPユーザー: mainadmin"
          Write-Output "パスワードはsecretsから取得しています"
          Write-Output "WebアクセスURL (noVNC): $web_url/vnc.html?autoconnect=true&password=${{ secrets.RDP_PASSWORD }}&path=websockify"
          Write-Output "RDP接続: $rdp_host:$rdp_port (ポート3389として接続)"
          Write-Output "RDP接続を維持中... ワークフローを手動でキャンセルしてください"
          while ($true) {
            Start-Sleep -Seconds 60
            Write-Output "$(Get-Date): RDP接続を維持中..."
          }
