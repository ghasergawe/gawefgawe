name: Windows RDP Access
on: workflow_dispatch

jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:

    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: リモートデスクトップを有効化
      shell: powershell
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services")) {
          New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Force
        }
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "fDisableAudioCapture" -Value 0 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "fEnableAudioRedirection" -Value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableAudioRedirection" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fEnableAudioCompression" -Value 1 -Force
        if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client")) {
          New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client" -Force
        }
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client" -Name "fDisableAudioCaptureRedirection" -Value 0 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\Client" -Name "fDisableAudioRedirection" -Value 0 -Type DWORD -Force

    - name: ネットワーク最適化（FPS向上を含む追加設定）
      shell: powershell
      run: |
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxBandwidth" -Value 0xffffffff -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MinEncryptionLevel" -Value 2 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "ColorDepth" -Value 4 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "DisableWallpaper" -Value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "DisableFullWindowDrag" -Value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "DisableMenuAnims" -Value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "DisableThemes" -Value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "DisableCursorSetting" -Value 1 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableClip" -Value 0 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "FlowControlDisplayBandwidth" -Value 255 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "FlowControlChannelBandwidth" -Value 255 -Type DWORD -Force
        Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "FlowControlChargePostCompression" -Value 0 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "AVCHardwareEncodePreferred" -Value 1 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "PrioritizeH264AVC444" -Value 1 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "VisualQuality" -Value 1 -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "MaxCompressionLevel" -Value 0 -Type DWORD -Force
        netsh int tcp set global autotuninglevel=normal
        netsh int tcp set global rss=enabled
        netsh int tcp set global ecncapability=enabled
        netsh int tcp set global timestamps=disabled
        netsh int tcp set global rsc=enabled
        netsh int tcp set global fastopen=enabled
        netsh int tcp set global initialRto=300
        netsh int ip set global taskoffload=enabled
        $adapter = Get-NetAdapter | Where-Object { $_.Name -like "*Ethernet*" -and $_.Status -eq "Up" } | Select-Object -First 1
        if ($adapter) {
          netsh interface ipv4 set subinterface $adapter.InterfaceDescription mtu=1500 store=persistent
        }
        $adapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
        foreach ($adapter in $adapters) {
          $interface = "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\$($adapter.InterfaceGuid)"
          if (-not (Test-Path $interface)) { New-Item -Path $interface -Force }
          Set-ItemProperty -Path $interface -Name "TcpAckFrequency" -Value 1 -Type DWORD -Force
          Set-ItemProperty -Path $interface -Name "TcpDelAckTicks" -Value 0 -Type DWORD -Force
          Set-ItemProperty -Path $interface -Name "TCPNoDelay" -Value 1 -Type DWORD -Force
        }
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "NetworkThrottlingIndex" -Value 0xffffffff -Type DWORD -Force
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "SystemResponsiveness" -Value 0 -Type DWORD -Force
        $gamesPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games"
        if (-not (Test-Path $gamesPath)) { New-Item -Path $gamesPath -Force }
        Set-ItemProperty -Path $gamesPath -Name "Affinity" -Value 0 -Type DWORD -Force
        Set-ItemProperty -Path $gamesPath -Name "GPU Priority" -Value 8 -Type DWORD -Force
        Set-ItemProperty -Path $gamesPath -Name "Priority" -Value 6 -Type DWORD -Force
        Set-ItemProperty -Path $gamesPath -Name "Scheduling Category" -Value "High" -Type String -Force
        Set-ItemProperty -Path $gamesPath -Name "SFIO Priority" -Value "High" -Type String -Force
        Set-ItemProperty -Path $gamesPath -Name "Background Only" -Value "False" -Type String -Force
        Set-ItemProperty -Path $gamesPath -Name "Clock Rate" -Value 10000 -Type DWORD -Force
        Set-ItemProperty -Path $gamesPath -Name "Latency Sensitive" -Value "True" -Type String -Force
        powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -Type DWORD -Force
        $servicesToDisable = @("SysMain","WSearch","DiagTrack","dmwappushservice","lfsvc","MapsBroker","XblAuthManager","XblGameSave")
        foreach ($service in $servicesToDisable) {
          if (Get-Service -Name $service -ErrorAction SilentlyContinue) {
            Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
          }
        }
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" -Name "SelectTransport" -Value 0 -Type DWORD -Force
        Enable-NetFirewallRule -DisplayName "Remote Desktop - User Mode (UDP-In)" -ErrorAction SilentlyContinue
        Install-WindowsFeature -Name RDS-RD-Server -IncludeManagementTools -Restart:$false

    - name: Windowsオーディオサービスを有効化
      shell: powershell
      run: |
        Set-Service -Name "Audiosrv" -StartupType Automatic; Start-Service -Name "Audiosrv" -ErrorAction SilentlyContinue
        Set-Service -Name "AudioEndpointBuilder" -StartupType Automatic; Start-Service -Name "AudioEndpointBuilder" -ErrorAction SilentlyContinue
        Set-Service -Name "UmRdpService" -StartupType Automatic; Start-Service -Name "UmRdpService" -ErrorAction SilentlyContinue
        Set-Service -Name "RemoteRegistry" -StartupType Automatic; Start-Service -Name "RemoteRegistry" -ErrorAction SilentlyContinue
        pnputil /scan-devices
        $null = [System.Diagnostics.Process]::Start("rundll32.exe","shell32.dll,Control_RunDLL mmsys.cpl,,0")

    - name: RDPユーザーを作成
      shell: powershell
      run: |
        if ($PSVersionTable.PSVersion.Major -ge 7) {
          $modulePath = "$env:SystemRoot\System32\WindowsPowerShell\v1.0\Modules\Microsoft.PowerShell.LocalAccounts"
          Import-Module $modulePath
        }
        $securePassword = ConvertTo-SecureString "${{ secrets.RDP_PASSWORD }}" -AsPlainText -Force
        if (-not (Get-LocalUser -Name "mainadmin" -ErrorAction SilentlyContinue)) {
          New-LocalUser -Name "mainadmin" -Password $securePassword -FullName "RDP Admin" -Description "RDP access user" -AccountNeverExpires -PasswordNeverExpires
        }
        if (-not (Get-LocalGroupMember -Group "Administrators" -Member "mainadmin" -ErrorAction SilentlyContinue)) {
          Add-LocalGroupMember -Group "Administrators" -Member "mainadmin"
        }

    - name: Install Visual Studio Code (latest) via winget and create Desktop shortcuts
      shell: powershell
      run: |
        if (-not (Get-Command winget.exe -ErrorAction SilentlyContinue)) {
          Write-Output "winget が見つかりません。App Installer(msixbundle) を PowerShell 5.1 でインストールします..."
          $msixUrl = "https://aka.ms/getwinget"
          $msixLocal = Join-Path $env:TEMP "Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"
          Invoke-WebRequest -UseBasicParsing -Uri $msixUrl -OutFile $msixLocal -ErrorAction Stop
          try {
            Add-AppxPackage -Path $msixLocal -ErrorAction Stop
            Write-Output "App Installer(msixbundle) をインストールしました。"
          } catch {
            Write-Warning "App Installer のインストールに失敗しました: $_"
          }
        }
        if (-not (Get-Command winget.exe -ErrorAction SilentlyContinue)) {
          Write-Output "winget がまだ見つかりません。Microsoft.WinGet.Client モジュールで修復を試みます..."
          try {
            Install-PackageProvider -Name NuGet -Force | Out-Null
            Install-Module -Name Microsoft.WinGet.Client -Force -Repository PSGallery | Out-Null
            Import-Module Microsoft.WinGet.Client
            Repair-WinGetPackageManager -Force -Latest
            Write-Output "WinGet 修復を完了しました。"
          } catch {
            Write-Warning "WinGet 修復に失敗しました: $_"
          }
        }
        if (Get-Command winget.exe -ErrorAction SilentlyContinue) {
          winget install --id Microsoft.VisualStudioCode -e --accept-package-agreements --accept-source-agreements --silent
        } else {
          Write-Error "winget が利用できないため VS Code のインストールをスキップします。"
        }
        $possible = @(
          "C:\Program Files\Microsoft VS Code\Code.exe",
          "$env:LOCALAPPDATA\Programs\Microsoft VS Code\Code.exe",
          "C:\Program Files (x86)\Microsoft VS Code\Code.exe"
        )
        $target = $possible | Where-Object { Test-Path $_ } | Select-Object -First 1
        if (-not $target) {
          $cmd = Get-Command code -ErrorAction SilentlyContinue
          if ($cmd) { $target = $cmd.Source }
        }
        if (-not $target) { Write-Error "Visual Studio Code の Code.exe が見つかりません。"; exit 1 }
        $shellObj = New-Object -ComObject WScript.Shell
        $destUsers = @("mainadmin","Public")
        foreach ($u in $destUsers) {
          if ($u -eq "Public") {
            $desktopPath = [Environment]::GetFolderPath("CommonDesktopDirectory")
          } else {
            $desktopPath = Join-Path "C:\Users" $u
            $desktopPath = Join-Path $desktopPath "Desktop"
          }
          if (-not (Test-Path $desktopPath)) { New-Item -ItemType Directory -Path $desktopPath -Force | Out-Null }
          $lnk = Join-Path $desktopPath "Visual Studio Code.lnk"
          $sc = $shellObj.CreateShortcut($lnk)
          $sc.TargetPath = $target
          $sc.WorkingDirectory = Split-Path $target
          $sc.IconLocation = "$target,0"
          $sc.Save()
          Write-Output "ショートカット作成: $lnk"
        }

    - name: Download OpenVPN Connect
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://openvpn.net/downloads/openvpn-connect-v3-windows.msi" -OutFile "openvpn-connect.msi"

    - name: Install OpenVPN Connect
      shell: powershell
      run: |
        msiexec /i openvpn-connect.msi /qn /norestart

    - name: Boreツールをダウンロード
      shell: powershell
      run: |
        Invoke-WebRequest -Uri https://github.com/ekzhang/bore/releases/download/v0.6.0/bore-v0.6.0-x86_64-pc-windows-msvc.zip -OutFile bore.zip
        Expand-Archive bore.zip -DestinationPath . -Force
        if (Test-Path "bore\bore.exe") {
          Move-Item -Path "bore\bore.exe" -Destination .
        } elseif (Test-Path "bore-v0.6.0-x86_64-pc-windows-msvc\bore.exe") {
          Move-Item -Path "bore-v0.6.0-x86_64-pc-windows-msvc\bore.exe" -Destination .
        } elseif (Test-Path "bore.exe") {
          Write-Output "bore.exe はすでに存在します"
        } else {
          $boreExe = Get-ChildItem -Recurse -Filter "bore.exe" | Select-Object -First 1
          if ($boreExe) { Move-Item -Path $boreExe.FullName -Destination . }
          else { Write-Error "bore.exe が見つかりません"; exit 1 }
        }
        if (-not (Test-Path ".\bore.exe")) { Write-Error "bore.exe の準備に失敗"; exit 1 }

    - name: Boreトンネルを開始
      shell: powershell
      run: |
        Write-Output "RDPユーザー: mainadmin"
        Write-Output "パスワードは secrets から取得"
        Write-Output "オーディオリダイレクトを有効にするには RDP クライアントのローカルリソースで設定を “このコンピューターで再生” に"
        Start-Process -FilePath ".\bore.exe" -ArgumentList "local 3389 --to bore.pub" -NoNewWindow
        Write-Output "RDP接続を維持中... 手動でキャンセルしてください"
        while ($true) {
          Start-Sleep -Seconds 60
          Write-Output "$(Get-Date): RDP接続を維持中..."
        }

